---

- name: Make sure handlers are flushed immediately
  ansible.builtin.meta: flush_handlers

#install etcd client

- name: Install etcd client
  package:
    name: etcd-client
    state: present



##Install Patroni

- name: install python3-psycopg2
  apt:
    name:
      - python3-psycopg2
    state: present
    update_cache: true

- name: Install generally useful packages for patroni
  package:
    name:
      - python3
      - python3-pip
    state: present

- name: Install patroni
  package:
    name:
      - patroni
    state: present

# - name: Install multi python packages with version specifiers testresources
#   ansible.builtin.pip:
#     name: testresources
#     state: latest
#     executable: pip3    
#     extra_args: --upgrade
#   environment:
#     PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
#     PIP_BREAK_SYSTEM_PACKAGES: "1"    

# - name: Install multi python packages with version specifiers setuptools
#   ansible.builtin.pip:
#     name: setuptools
#     state: latest
#     executable: pip3    
#     extra_args: --upgrade
#   environment:
#     PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
#     PIP_BREAK_SYSTEM_PACKAGES: "1"  

# - name: Install multi python packages with version specifiers virtualenv
#   ansible.builtin.pip:
#     name: virtualenv
#     state: latest
#     executable: pip3    
#     extra_args: --upgrade
#   environment:
#     PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
#     PIP_BREAK_SYSTEM_PACKAGES: "1"  


# - name: Install multi python packages with version specifiers python-etcd
#   ansible.builtin.pip:
#     name: python-etcd
#     state: latest
#     executable: pip3    
#     extra_args: --upgrade
#   environment:
#     PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
#     PIP_BREAK_SYSTEM_PACKAGES: "1"  

# - name: Install multi python packages with version specifiers python-consul
#   ansible.builtin.pip:
#     name: python-consul
#     state: latest
#     executable: pip3    
#     extra_args: --upgrade
#   environment:
#     PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
#     PIP_BREAK_SYSTEM_PACKAGES: "1"  


# - name: Install multi python packages with version specifiers patroni
#   ansible.builtin.pip:
#     name: patroni
#     state: latest
#     executable: pip3    
#     extra_args: --upgrade
#   environment:
#     PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
#     PIP_BREAK_SYSTEM_PACKAGES: "1"  


- name: Install consul client package
  package:
    name: python3-consul
    state: present
  when: dcs == "consul"

- name: Install zookeeper client package
  package:
    name: python3-kazoo
    state: present
  when: dcs == "zookeeper"

- name: Install etcd client package
  package:
    name: python3-etcd3
    state: present
  when: dcs == "etcd3"

- name: Install vip-manager2 package
  package:
    name: vip-manager2
    state: present
  when: vip is defined and vip != "" and dcs == "etcd3"


- name: Change file ownership, group and permissions
  ansible.builtin.file:
    path: "{{ postgresql_data_dir_base }}/{{ postgresql_major_version }}/{{ postgresql_cluster_name }}"
    owner: "postgres"
    group: "postgres"
    mode: '0700'
    state: directory


- name: SET patroni.yml template
  template:
    src: templates/patroni.yml.j2
    dest: /etc/patroni/config.yml
    owner: root
    group: root
    mode: '0644'

# - name: copy patroni.service
#   copy:
#     src: files/patroni.service
#     dest: /etc/systemd/system/patroni.service
#     owner: root
#     group: root
#     mode: '0644'

- name: force systemd to reread configs and patroni start
  systemd:
    daemon_reload: yes
    name: patroni
    state: restarted
    enabled: yes

# - name: Deploy patroni DCS config
#   template:
#     src: templates/dcs.yml
#     dest: /etc/patroni/dcs.yml
#     mode: 0640
#     owner: "postgres"
#     group: "postgres"
#   tags:
#     - config

# - name: Deploy patroni config templates
#   template:
#     src: templates/config.yml.in
#     dest: /etc/patroni/config.yml.in
#     mode: 0640
#     owner: "postgres"
#     group: "postgres"
#   tags:
#     - config

# - name: Create patroni configuration
#   command: pg_createconfig_patroni --force --hostip={{ hostvars[ansible_hostname]['ansible_eth1']['ipv4']['address'] }} {% if vip is defined %}--vip={{ vip }} {% if dcs_server_ips | length > 1 %}--endpoint=http://{{ hostvars[ansible_hostname]['ansible_eth1']['ipv4']['address'] }}:2379{% endif %}{% endif %} {{ postgresql_major_version }} {{ postgresql_cluster_name }}
#   tags:
#     - config

# - name: systemctl daemon-reload / start patroni
#   systemd:
#     daemon_reload: yes
#     name: patroni@{{ postgresql_major_version }}-{{ postgresql_cluster_name }}
#     state: restarted
#     enabled: yes
#   tags:
#     - config

- name: systemctl daemon-reload / start vip-manager
  systemd:
    daemon_reload: yes
    name: vip-manager@{{ postgresql_major_version }}-{{ postgresql_cluster_name }}
    state: restarted
    enabled: yes
  when: vip is defined and vip != ""
  tags:
    - config