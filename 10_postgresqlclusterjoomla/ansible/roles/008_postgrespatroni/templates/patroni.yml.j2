name: {{ansible_hostname}}
scope: {{ postgresql_cluster_name }}
namespace: /service/


log:
  traceback_level: DEBUG
  level: DEBUG
  dir: {{ patroni_var_dirlog }}
  file_num: 5

restapi:
  listen: 0.0.0.0:{{patroni_port}}
  connect_address: {{ hostvars[ansible_hostname]['ansible_eth1']['ipv4']['address'] }}:{{patroni_port}}

{% if dcs == 'zookeeper' or dcs == 'etcd' or dcs == 'etcd3' %}
{{ dcs }}:
  hosts:
{%   for item in dcs_server_ips
 %}
    - {{ item.ip }}:{{ dcs_port[dcs] }}
{%
     endfor %}
{% endif %}

bootstrap:
  # Configuration parameters for distributed configuration store (DCS)
  #method: initdb  
#
  # method: pg_createcluster
  # pg_createcluster:
  #   command: /usr/share/patroni/pg_createcluster_patroni
#      
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    check_timeline: true
    maximum_lag_on_failover: 1048576
    postgresql:
      # Use pg_rewind during bootstrap    
      use_pg_rewind: true
      #
      remove_data_directory_on_rewind_failure: true
      remove_data_directory_on_diverged_timelines: true      
      #
      #use_slots: true
      # pg_hba.conf entries for replication and general access
      #Additional parameters
      parameters:
        shared_buffers: '512MB'
        wal_level: 'replica'
        wal_keep_size: '512MB'
        max_connections: 100
        effective_cache_size: '1GB'
        maintenance_work_mem: '256MB'
        max_wal_senders: 5
        max_replication_slots: 5
        checkpoint_completion_target: 0.7
        log_connections: 'on'
        log_disconnections: 'on'
        log_statement: 'ddl'
        log_line_prefix: '%m [%p] %q%u@%d '
        logging_collector: 'on'
        log_destination: 'stderr'
        log_directory: /var/log/postgresql        
        log_filename: 'postgresql-%Y-%m-%d.log'
        log_rotation_size: '100MB'
        log_rotation_age: '1d'
        log_min_duration_statement: -1
        log_min_error_statement: 'error'
        log_min_messages: 'warning'
        log_error_verbosity: 'verbose'
        log_hostname: 'off'
        log_duration: 'off'
        log_timezone: 'Europe/Moscow'
        timezone: 'Europe/Moscow'
        lc_messages: 'C.UTF-8'
        password_encryption: 'scram-sha-256'
        debug_print_parse: 'off'
        debug_print_rewritten: 'off'
        debug_print_plan: 'off'
        superuser_reserved_connections: 3
        synchronous_commit: 'on'
        synchronous_standby_names: '*'
        hot_standby: 'on'
        compute_query_id: 'on'
      pg_hba:
        - local   all             all                                     peer      
      #  - local   all             all                                     trust
        - host    all             all             0.0.0.0/0               md5
        - host    all             all             127.0.0.1/32            scram-sha-256          
        - host    replication     replicator      127.0.0.1/32            scram-sha-256
        - host    replication     replicator      ::1/128                 scram-sha-256
        - host    replication     replicator      10.110.0.0/24           scram-sha-256

  pg_hba:
    - local   all             all                                     peer      
   # - local   all             all                                     trust
    - host    all             all             0.0.0.0/0               md5  
    - host    all             all             127.0.0.1/32            scram-sha-256          
    - host    replication     replicator      127.0.0.1/32            scram-sha-256
    - host    replication     replicator      ::1/128                 scram-sha-256
    - host    replication     replicator      10.110.0.0/24           scram-sha-256

  #
  # Initdb configuration
  initdb:
  - encoding: UTF8
  - data-checksums
  - auth: scram-sha-256
  - username: postgres

      

# Patroni PostgreSQL Configuration
postgresql:
  # Custom clone method
  # The options --scope= and --datadir= are passed to the custom script by
  # patroni and passed on to pg_createcluster by pg_clonecluster_patroni
# 
  # create_replica_method:
  #   - pg_clonecluster
  # pg_clonecluster:
  #   command: /usr/share/patroni/pg_clonecluster_patroni
#    
  # PostgreSQL server listening address and port
  listen: 0.0.0.0:{{postgresql_port}}
  # Connect address for PostgreSQL clients
  connect_address: {{ hostvars[ansible_hostname]['ansible_eth1']['ipv4']['address'] }}:{{postgresql_port}}
  use_unix_socket: true
  # Data directory for PostgreSQL  
  data_dir: "{{ postgresql_data_dir_base }}/{{ postgresql_major_version }}/main"
  bin_dir: "/usr/lib/postgresql/{{ postgresql_major_version }}/bin"
  config_dir: "/etc/postgresql/{{ postgresql_major_version }}/{{ postgresql_cluster_name }}"
  # Path to the pgpass file  
  pgpass: "/tmp/{{ postgresql_cluster_name }}-{{ postgresql_major_version }}.pgpass"
  # Authentication configuration  
  authentication:
    # Replication of user credentials  
    replication:
      username: "{{ patroni_replication_user }}"
      password: "{{ patroni_replication_pass }}"
    # Superuser credentials      
    superuser:
      username: postgres
      password: {% if patroni_postgres_pass|length %}"{{ patroni_postgres_pass }}"{% endif %}

{% if patroni_rewind_user|length %}
    rewind:
      username: "{{ patroni_rewind_user }}"
      password: "{{ patroni_rewind_pass }}"
{% else %}
#    rewind:
#      username: "rewind"
#      password: "rewind-pass"
{% endif %}
  # create_replica_methods:
  #   - basebackup
  # basebackup:
  #   max-rate: '100M'
  #   checkpoint: 'fast'
  parameters:
     unix_socket_directories: '..'


# Patroni Tags Configuration
tags:
    # Prevents a node from being promoted in case of failure
    nofailover: false
    # Prevents the load balancer from considering this node
    noloadbalance: false
    # Prevents a replica from being created by cloning
    clonefrom: false
    # Prevents synchronous replication from being enforced
    nosync: false
    nostream: false