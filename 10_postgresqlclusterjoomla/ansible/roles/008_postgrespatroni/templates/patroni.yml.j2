name: {{ansible_hostname}}
scope: "{{ postgresql_cluster_name }}-{{ postgresql_major_version }}"
#namespace: "/postgresql-common/"



restapi:
  listen: 0.0.0.0:{{patroni_port}}
  connect_address: {{ hostvars[ansible_hostname]['ansible_eth1']['ipv4']['address'] }}:{{patroni_port}}

{% if dcs == 'zookeeper' or dcs == 'etcd' or dcs == 'etcd3' %}
{{ dcs }}:
  hosts:
{%   for item in dcs_server_ips
 %}
    - {{ item.ip }}:{{ dcs_port[dcs] }}
{%
     endfor %}
{% endif %}



bootstrap:
      dcs:
        ttl: 30
        loop_wait: 10
        retry_timeout: 10
        maximum_lag_on_failover: 1048576
        postgresql:
          use_pg_rewind: true
          use_slots: true
          parameters:
            wal_level: replica
            hot_standby: "on"
            logging_collector: "on"
            max_wal_senders: 5
            max_replication_slots: 5

initdb:
  - encoding: UTF8
  - data-checksums

pg_hba:
      - local   all             all                                     peer
      - host    all             all             127.0.0.1/32            md5
      - host    all             all             ::1/128                 md5
      - host    all             all             10.110.0.0/24           md5
      - local   replication     all                                     peer
      - host    replication     all             127.0.0.1/32            trust
      - host    replication     all             ::1/128                 md5
      - host    replication     all             10.110.0.0/24           md5



postgresql:
  listen: 0.0.0.0:{{postgresql_port}}
  connect_address: {{ hostvars[ansible_hostname]['ansible_eth1']['ipv4']['address'] }}:{{postgresql_port}}
  use_unix_socket: true

  data_dir: {{ postgresql_data_dir_base }}/{{ postgresql_major_version }}/{{ postgresql_cluster_name }}"
  bin_dir: /usr/lib/postgresql/{{ postgresql_major_version }}/bin
  config_dir: /etc/postgresql/{{ postgresql_major_version }}{{ postgresql_cluster_name }}
  pgpass: /var/lib/postgresql/{{ postgresql_major_version }}-{{ postgresql_cluster_name }}.pgpass
  authentication:
    replication:
      username: "{{ patroni_replication_user }}"
      password: "{{ patroni_replication_pass }}"
    superuser:
      username: postgres
      password: {% if patroni_postgres_pass|length %}"{{ patroni_postgres_pass }}"{% endif %}


# A rewind role can be specified in order for Patroni to use on PostgreSQL 11
# or later for pg_rewind, i.e. rewinding a former primary after failover
# without having to re-clone it. Patroni will assign this user the necessary
# permissions (that only exist from PostgreSQL)
{% if patroni_rewind_user|length %}
    rewind:
      username: "{{ patroni_rewind_user }}"
      password: "{{ patroni_rewind_pass }}"
{% else %}
#    rewind:
#      username: "rewind"
#      password: "rewind-pass"
{% endif %}

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false